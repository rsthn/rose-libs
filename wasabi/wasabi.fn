;; *********************
;; Wasabi S3 API

(set HOSTNAME null)
(set ACCESS_KEY_ID null)
(set SECRET_ACCESS_KEY null)
(set SESSION_TOKEN null)
(set PROGRESS_HANDLER null)
(set LAST_ERROR "")


;; Sets the Wasabi credentials.
;; @param { access_key_id:string, secret_access_key:string, session_token:string, hostname:string } data
(def-fn wasabi:config data
    (set local.ACCESS_KEY_ID (data.access_key_id))
    (set local.SECRET_ACCESS_KEY (data.secret_access_key))
    (set local.SESSION_TOKEN (data.session_token))
    (set local.HOSTNAME (?? (data.hostname) "wasabisys.com"))
)


;; Returns the HMAC-SHA1 signature of the given value.
;; @param {string} value: The value to sign.
;; @returns {string}
(def-fn private wasabi:sign value
    (base64:encode (crypto:hmac-bin "sha1" (local.SECRET_ACCESS_KEY) (value)))
)


;; Processes the response from Wasabi and returns `null` if no error or an error code (string).
;; @param {string} data: The response data.
;; @returns {bool}
(def-fn private process-response data
    (set local.LAST_ERROR "")
    (when (eq? (request:status) 200)
        (ret false))

    (when (eq? (request:status) 0)
        (set local.LAST_ERROR (request:error))
        (ret true))

    (set data (xml:simplify (xml:parse (data))))

    (when (data.ErrorResponse)
        (set local.LAST_ERROR (concat (data.ErrorResponse.Error.'0'.Code.0) ": " (data.ErrorResponse.Error.'0'.Message.0)))
        (ret true)
    )

    (set local.LAST_ERROR (data.Error.Code.0))
    (? (local.LAST_ERROR) true false)
)


;; Returns the last error code.
;; @returns {string}
(def-fn wasabi:last-error
    (local.LAST_ERROR)
)

(def-fn private wasabi:prepare-request method url content_type="text/plain"

    (set request_date (datetime:format (datetime:now) "%a, %d %b %Y %H:%M:%S GMT"))

    (set signed_headers [])
    (when (local.SESSION_TOKEN)
        (array:push (signed_headers) "x-amz-security-token:(local.SESSION_TOKEN)")
    )

    (set string_to_sign "(method)\n")
    (append string_to_sign "\n")
    (append string_to_sign "(content_type)\n")
    (append string_to_sign "(request_date)\n")

    (when (signed_headers.length)
        (append string_to_sign (concat (join "\n" (signed_headers)) "\n")))

    (append string_to_sign (url))

    (set signature (wasabi:sign (string_to_sign)))

    (request:headers [
        "Content-Type: (content_type)"
        "Date: (request_date)"
        "Authorization: AWS (local.ACCESS_KEY_ID):(signature)"
    ])

    (request:headers (signed_headers))
)

;; Returns the identity of the caller.
;; @returns { arn:string, user_id:string, account:string }
(def-fn wasabi:get-caller-identity

    (wasabi:prepare-request "GET" "/")
    (when (process-response (request:get "https://sts.(local.HOSTNAME)/?Action=GetCallerIdentity"))
        (throw (local.LAST_ERROR)))

    (set res (xml:parse (request:data)))
    (set res (xml:simplify (res)))

    (set res (res.GetCallerIdentityResponse.GetCallerIdentityResult.0))
    {
        arn (res.Arn.0)
        user_id (res.UserId.0)
        account (res.Account.0)
    }
)


;; Returns a set of temporary security credentials that you can use to access resources.
;; @param {string} role_arn: The Resource Name (ARN) of the role to assume.
;; @param {int} duration_seconds: The duration, in seconds, of the role session (default is 900).
;; @param {string} role_session_name: An identifier for the assumed role session (default is "wasabi_session").
;; @returns { arn:string, access_key_id:string, secret_access_key:string, session_token:string, expiration:string }
(def-fn wasabi:assume-role role_arn duration_seconds=900 role_session_name="wasabi_session"

    (wasabi:prepare-request "GET" "/")
    (when (process-response (request:get "https://sts.(local.HOSTNAME)/?Action=AssumeRole&RoleArn=(role_arn)&DurationSeconds=(duration_seconds)&RoleSessionName=(role_session_name)"))
        (throw (local.LAST_ERROR)))

    (set res (xml:parse (request:data)))
    (set res (xml:simplify (res)))
    (set res (res.AssumeRoleResponse.AssumeRoleResult.0))

    {
        arn (res.AssumedRoleUser.'0'.Arn.0)
        access_key_id (res.Credentials.'0'.AccessKeyId.0)
        secret_access_key (res.Credentials.'0'.SecretAccessKey.0)
        session_token (res.Credentials.'0'.SessionToken.0)
        expiration (res.Credentials.'0'.Expiration.0)
    }
)


;; Verifies if the specified path exists.
;; @param {string} bucketName: Name of the bucket.
;; @param {string} filePath: Relative path to the file.
;; @returns {bool}
(def-fn wasabi:exists bucketName filePath=""

    (when (ends-with? "/" (filePath))

        (wasabi:prepare-request "GET" "/(bucketName)/")
        (when (process-response (request:get "https://s3.(local.HOSTNAME)/(bucketName)/?prefix=(substr 0 -1 (filePath))&max-keys=1"))
            (throw (local.LAST_ERROR)))

        (set res (xml:parse (request:data)))
        (set res (xml:simplify (res)))
        (ret (not-null? (res.ListBucketResult.Contents)))
    )

    (wasabi:prepare-request "HEAD" "/(bucketName)/(filePath)")
    (request:head "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)")
    (eq? 200 (request:status))
)


;; Creates a new bucket.
;; @param {string} bucketName: Name of the bucket to create.
;; @returns {void}
(def-fn wasabi:create-bucket bucketName

    (wasabi:prepare-request "PUT" "/(bucketName)/")
    (when (process-response (request:put "https://s3.(local.HOSTNAME)/(bucketName)/"))
        (throw (local.LAST_ERROR)))
)


;; Deletes a bucket.
;; @param {string} bucketName: Name of the bucket to delete.
;; @returns {void}
(def-fn wasabi:delete-bucket bucketName

    (wasabi:prepare-request "DELETE" "/(bucketName)/")
    (when (process-response (request:delete "https://s3.(local.HOSTNAME)/(bucketName)/"))
        (throw (local.LAST_ERROR)))
)


;; Lists all buckets.
;; @returns { [{created:datetime, name:string}] } List of buckets.
(def-fn wasabi:list-buckets

    (wasabi:prepare-request "GET" "/")
    (when (process-response (request:get "https://s3.(local.HOSTNAME)/"))
        (throw (local.LAST_ERROR)))

    (set res (xml:parse (request:data)))
    (set res (xml:simplify (res)))

    (map i (res.ListAllMyBucketsResult.Buckets."0".Bucket) (&
        created (datetime:parse (i.CreationDate.0))
        name (i.Name.0)
    ))
)


;; Creates a new folder.
;; @param {string} bucketName: Name of the bucket to create the folder in.
;; @param {string} folderPath: Relative path of the folder to create. Do not end with a slash.
;; @returns {void}
(def-fn wasabi:create-folder bucketName folderPath

    (wasabi:prepare-request "PUT" "/(bucketName)/(folderPath)/")
    (when (process-response (request:put "https://s3.(local.HOSTNAME)/(bucketName)/(folderPath)/"))
        (throw (local.LAST_ERROR)))
)


;; Uploads a data buffer.
;; @param {string} bucketName: Name of the bucket to upload the file to.
;; @param {string} filePath: The target path (within the bucket).
;; @param {string} fileData: Data to upload.
;; @param {string} contentType: Content type of the data.
;; @returns {void}
(def-fn wasabi:upload-data bucketName filePath fileData contentType="application/octet-stream"

    (wasabi:prepare-request "PUT" "/(bucketName)/(filePath)" (contentType))
    (when (process-response (request:put "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)" (fileData)))
        (throw (local.LAST_ERROR)))
)

;; Sets the progress handler for the next upload or download operation.
;; @param {fn} progressHandler: Function accepting two arguments `percent` and `total`.
;; @returns {void}
(def-fn wasabi:progress-handler progressHandler
    (set local.PROGRESS_HANDLER (progressHandler))
)

;; Uploads a file.
;; @param {string} bucketName: Name of the bucket to upload the file to.
;; @param {string} filePath: The target path (within the bucket).
;; @param {string} sourceFilePath: File to upload.
;; @param {int} chunk_size: Size of the chunks to upload (default is 64 MB).
;; @returns {bool}
(def-fn wasabi:upload-file bucketName filePath sourceFilePath chunk_size=67108864

    (when-not (path:exists (sourceFilePath))
        (throw "File does not exist"))

    (set file_size (file:size (sourceFilePath)))
    (when-not (file_size)
        (throw "File is empty"))

    (set sth (stream:open (sourceFilePath)))

    (set uploadId (wasabi:multipart-initiate (bucketName) (filePath)))
    (set partsList [])
    (trace "[INFO] [(datetime:now)] multipart upload bucketName=(bucketName), filePath=(filePath), uploadId=(uploadId)")

    (set progressHandler (local.PROGRESS_HANDLER))
    (set local.PROGRESS_HANDLER null)

    (when (progressHandler)
        ((progressHandler) 0.0 (file_size)))

    (for chunk_offs in (range 0.0 (file_size) (chunk_size))
        (set chunk (stream:read (sth) (chunk_size)))
        (wasabi:multipart-upload (bucketName) (filePath) (uploadId) (partsList) (chunk))

        (when (progressHandler)
            ((progressHandler) (math:fixed (/ (* 100.0 (chunk_offs)) (file_size))) (file_size)))
    )

    (when (progressHandler)
        ((progressHandler) 100.0 (file_size)))

    (stream:close (sth))
    (wasabi:multipart-complete (bucketName) (filePath) (uploadId) (partsList))

    true
)


;; Downloads a file as a data buffer or throws an error if the file does not exist.
;; @param {string} bucketName: Name of the bucket to download the file from.
;; @param {string} filePath: Relative path of the file to download.
;; @returns {string}
(def-fn wasabi:download-data bucketName filePath

    (wasabi:prepare-request "GET" "/(bucketName)/(filePath)")
    (request:get "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)")

    (when (ne? 200 (request:status))
        (throw (request:status)))

    (request:data)
)

;; Downloads a file or throws an error if the file does not exist.
;; @param {string} bucketName: Name of the bucket to download the file from.
;; @param {string} filePath: Relative path of the file to download.
;; @param {string} targetFilePath: The target path to save the file.
;; @returns {bool}
(def-fn wasabi:download-file bucketName filePath targetFilePath

    (wasabi:prepare-request "GET" "/(bucketName)/(filePath)")
    (request:output-file (targetFilePath))
    (request:get "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)")
)


;; Lists all files in a bucket.
;; @param {string} bucketName: Name of the bucket to list files from.
;; @param {string} folderPath: Relative path of the folder.
;; @returns { [{lastModified:datetime, path:string, size:int}] } List of files.
(def-fn wasabi:list bucketName folderPath="" lastKey="" pageNumber=0

    (wasabi:prepare-request "GET" "/(bucketName)/")
    (when (process-response (request:get "https://s3.(local.HOSTNAME)/(bucketName)/?prefix=(folderPath)&max-keys=1000&marker=(lastKey)"))
        (throw (local.LAST_ERROR)))

    (set res (xml:parse (request:data)))
    (set res (xml:simplify (res)))

    (set wasTruncated (res.ListBucketResult.IsTruncated.0))
    (set res (map i (coalesce (res.ListBucketResult.Contents) [])
        (?  (not (i.Size.0)) null
            (& lastModified (datetime:parse (i.LastModified.0)) path (i.Key.0) size (i.Size.0))
        )
    ))

    (set res (filter i (res) (not-null? (i))))
    (when (and (eqq? (wasTruncated) "true") (ne? 0 (res.length)) (lt? (pageNumber) 100))
        (set lastKey ((array:last (res)).name))
        (array:append (res) (wasabi:list (bucketName) (folderPath) (lastKey) (+ 1 (pageNumber))))
    )

    (res)
)


;; Lists all folders in a bucket.
;; @param {string} bucketName: Name of the bucket to list files from.
;; @param {string} folderPath: Relative path of the folder.
;; @returns { [{lastModified:datetime, path:string}] } List of folders.
(def-fn wasabi:list-folders bucketName folderPath="" lastKey="" pageNumber=0

    (wasabi:prepare-request "GET" "/(bucketName)/")
    (when (process-response (request:get "https://s3.(local.HOSTNAME)/(bucketName)/?prefix=(folderPath)&max-keys=1000&marker=(lastKey)"))
        (throw (local.LAST_ERROR)))

    (set res (xml:parse (request:data)))
    (set res (xml:simplify (res)))

    (set wasTruncated (res.ListBucketResult.IsTruncated.0))
    (set res (map i (coalesce (res.ListBucketResult.Contents) [])
        (?  (i.Size.0) null
            (& lastModified (datetime:parse (i.LastModified.0)) path (i.Key.0))
        )
    ))

    (set res (filter i (res) (not-null? (i))))
    (when (and (eqq? (wasTruncated) "true") (ne? 0 (res.length)) (lt? (pageNumber) 100))
        (set lastKey ((array:last (res)).name))
        (array:append (res) (wasabi:list-folders (bucketName) (folderPath) (lastKey) (+ 1 (pageNumber))))
    )

    (res)
)


;; Returns the sum of the `size` field of all items in the list.
;; @param { [{size:string}] } fileList: The list of items to sum.
;; @returns {int}
(def-fn wasabi:sum-size fileList
    (reduce i z 0 (fileList) (+ (z) (int (i.size))))
)


;; Deletes a file.
;; @param {string} bucketName: Name of the bucket.
;; @param {string} filePath: Relative path of the file to delete.
;; @returns {void}
(def-fn wasabi:delete bucketName filePath

    (wasabi:prepare-request "DELETE" "/(bucketName)/(filePath)")
    (when (process-response (request:delete "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)"))
        (throw (local.LAST_ERROR)))
)

;; Returns the size of a file or `null` if the file does not exist.
;; @param {string} bucketName: Name of the bucket.
;; @param {string} filePath: Relative path to the file.
;; @returns {int|null}
(def-fn wasabi:filesize bucketName filePath

    (wasabi:prepare-request "HEAD" "/(bucketName)/(filePath)")
    (request:head "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)")
    (when (ne? 200 (request:status))
        (ret null))

    (request:response-headers."content-length")
)


;; Initiates a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @returns {string} The upload ID.
(def-fn wasabi:multipart-initiate bucketName filePath

    (wasabi:prepare-request "POST" "/(bucketName)/(filePath)?uploads")
    (when (process-response (request:post "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)?uploads" "{}"))
        (throw (local.LAST_ERROR)))

    (set res (xml:parse (request:data)))
    (set res (xml:simplify (res)))

    (res.InitiateMultipartUploadResult.UploadId.0)
)


;; Uploads a part of a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @param {string} uploadId: The upload ID.
;; @param { [{partNumber:int, etag:string}] } partsList: List of parts will be populated by this function.
;; @param {string} data: Data to upload.
;; @returns {void}
(def-fn wasabi:multipart-upload bucketName filePath uploadId partsList data

    (wasabi:prepare-request "PUT" "/(bucketName)/(filePath)?partNumber=(+ 1 (partsList.length))&uploadId=(uploadId)" "application/octet-stream")
    (when (process-response (request:put "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)?partNumber=(+ 1 (partsList.length))&uploadId=(uploadId)" (data)))
        (throw (local.LAST_ERROR)))

    (array:push (partsList) (&
        partNumber (+ 1 (partsList.length))
        etag ((request:response-headers).etag)
    ))
)


;; Completes a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @param {string} uploadId: The upload ID.
;; @param { [{partNumber:int, etag:string}] } partsList: The list of parts.
;; @returns {void}
(def-fn wasabi:multipart-complete bucketName filePath uploadId partsList

    (set xmlData (concat
        "<CompleteMultipartUpload>"
        (join (map i (partsList)
            "<Part><PartNumber>(i.partNumber)</PartNumber><ETag>(i.etag)</ETag></Part>"
        ))
        "</CompleteMultipartUpload>"
    ))

    (wasabi:prepare-request "POST" "/(bucketName)/(filePath)?uploadId=(uploadId)" "application/xml")
    (when (process-response (request:post "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)?uploadId=(uploadId)" (xmlData)))
        (throw (local.LAST_ERROR)))
)


;; Cancels a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @param {string} uploadId: The upload ID.
;; @returns {void}
(def-fn wasabi:multipart-cancel bucketName filePath uploadId

    (wasabi:prepare-request "DELETE" "/(bucketName)/(filePath)?uploadId=(uploadId)")
    (when (process-response (request:delete "https://s3.(local.HOSTNAME)/(bucketName)/(filePath)?uploadId=(uploadId)"))
        (throw (local.LAST_ERROR)))
)
