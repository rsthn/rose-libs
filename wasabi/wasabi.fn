;; *********************
;; Wasabi S3 API

(set ACCESS_KEY_ID (config.wasabi.accessKeyId))
(set SECRET_ACCESS_KEY (config.wasabi.secretAccessKey))
(set LAST_ERROR "")


;; Sets the Wasabi credentials.
;; @param {string} accessKeyId
;; @param {string} secretAccessKey
;; @returns {void}
(def-fn wasabi-config accessKeyId secretAccessKey
    (set local.ACCESS_KEY_ID (accessKeyId))
    (set local.SECRET_ACCESS_KEY (secretAccessKey))
)


;; Returns the HMAC-SHA1 signature of the given value.
;; @param {string} value: The value to sign.
;; @returns {string}
(def-fn private wasabi-sign value
    (utils::base64::encode (utils::hmac-binary "sha1" (local.SECRET_ACCESS_KEY) (value)))
)


;; Processes the response from Wasabi and returns `null` if no error or an error code (string).
;; @param {string} data: The response data.
;; @returns {string}
(def-fn private process-response data
    (set local.LAST_ERROR "")
    (when (eq (http::code) 200) (ret null))
    (set data (utils::xml::simplify (utils::xml::parse (data))))
    (set local.LAST_ERROR (data.Error.Code.0))
    (local.LAST_ERROR)
)


;; Returns the last error code.
;; @returns {string}
(def-fn wasabi-last-error
    (local.LAST_ERROR)
)


;; Creates a new bucket.
;; @param {string} bucketName: Name of the bucket to create.
;; @returns {void}
(def-fn wasabi-create-bucket bucketName
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set contentType "text/plain")
    (set signature (wasabi-sign `PUT\n\n{contentType}\n{requestDate}\n/{bucketName}/`))

    (http::header "Content-Type: (contentType)")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::put "https://(bucketName).s3.wasabisys.com/"))
        (throw (local.LAST_ERROR)))
)


;; Deletes a bucket.
;; @param {string} bucketName: Name of the bucket to delete.
;; @returns {void}
(def-fn wasabi-delete-bucket bucketName
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `DELETE\n\napplication/x-www-form-urlencoded\n{requestDate}\n/{bucketName}/`))

    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::delete "https://(bucketName).s3.wasabisys.com/"))
        (throw (local.LAST_ERROR)))
)


;; Creates a new folder.
;; @param {string} bucketName: Name of the bucket to create the folder in.
;; @param {string} folderPath: Relative path of the folder to create.
;; @returns {void}
(def-fn wasabi-create-folder bucketName folderPath
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set contentType "text/plain")
    (set signature (wasabi-sign `PUT\n\n{contentType}\n{requestDate}\n/{bucketName}/{folderPath}/`))

    (http::header "Content-Type: (contentType)")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::put "https://(bucketName).s3.wasabisys.com/(folderPath)/"))
        (throw (local.LAST_ERROR)))
)


;; Uploads a file.
;; @param {string} bucketName: Name of the bucket to upload the file to.
;; @param {string} filePath: The target path (within the bucket).
;; @param {string} fileData: Data to upload.
;; @param {string} contentType: Content type of the data.
;; @returns {void}
(def-fn wasabi-upload bucketName filePath fileData contentType="application/octet-stream"
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `PUT\n\n{contentType}\n{requestDate}\n/{bucketName}/{filePath}`))

    (http::header "Content-Type: (contentType)")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::put "https://(bucketName).s3.wasabisys.com/(filePath)" (fileData)))
        (throw (local.LAST_ERROR)))
)


;; Downloads a file or throws an error if the file does not exist.
;; @param {string} bucketName: Name of the bucket to download the file from.
;; @param {string} filePath: Relative path of the file to download.
;; @returns {string}
(def-fn wasabi-download bucketName filePath
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set contentType "application/x-www-form-urlencoded")
    (set signature (wasabi-sign `GET\n\n{contentType}\n{requestDate}\n/{bucketName}/{filePath}`))

    (http::header "Content-Type: (contentType)")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (http::get "https://(bucketName).s3.wasabisys.com/(filePath)")
    (when (ne 200 (http::code))
        (throw (http::code)))

    (http::data)
)


;; Lists all buckets.
;; @returns { [{created:datetime, name:string}] } List of buckets.
(def-fn wasabi-list-buckets
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `GET\n\n\n{requestDate}\n/`))

    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::get "https://s3.wasabisys.com/"))
        (throw (local.LAST_ERROR)))

    (set res (utils::xml::parse (http::data)))
    (set res (utils::xml::simplify (res)))

    (map i (res.ListAllMyBucketsResult.Buckets."0".Bucket)
        (& created (datetime::parse (i.CreationDate.0)) name (i.Name.0) )
    )
)


;; Lists all files in a bucket.
;; @param {string} bucketName: Name of the bucket to list files from.
;; @param {string} folderPath: Relative path of the folder.
;; @returns { [{lastModified:datetime, path:string, size:int}] } List of files.
(def-fn wasabi-list bucketName folderPath="" lastKey="" pageNumber=0
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `GET\n\n\n{requestDate}\n/{bucketName}/`))

    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::get "https://(bucketName).s3.wasabisys.com/?prefix=(folderPath)&max-keys=1000&marker=(lastKey)"))
        (throw (local.LAST_ERROR)))

    (set res (utils::xml::parse (http::data)))
    (set res (utils::xml::simplify (res)))

    (set wasTruncated (res.ListBucketResult.IsTruncated.0))
    (set res (select (isnotnull (i)) (map i (res.ListBucketResult.Contents)
        (?  (not (i.Size.0)) null
            (& lastModified (datetime::parse (i.LastModified.0)) path (i.Key.0) size (i.Size.0)))
    )))

    (when (isnull (res)) (set res (#)))
    (when (and (eqq (wasTruncated) "true") (ne 0 (res.length)) (lt (pageNumber) 100))
        (set lastKey ((array::last (res)).name))
        (array::append (res) (wasabi-list (bucketName) (folderPath) (lastKey) (+ 1 (pageNumber))))
    )

    (res)
)


;; Lists all folders in a bucket.
;; @param {string} bucketName: Name of the bucket to list files from.
;; @param {string} folderPath: Relative path of the folder.
;; @returns { [{lastModified:datetime, path:string}] } List of folders.
(def-fn wasabi-list-folders bucketName folderPath="" lastKey="" pageNumber=0
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `GET\n\n\n{requestDate}\n/{bucketName}/`))

    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::get "https://(bucketName).s3.wasabisys.com/?prefix=(folderPath)&max-keys=1000&marker=(lastKey)"))
        (throw (local.LAST_ERROR)))

    (set res (utils::xml::parse (http::data)))
    (set res (utils::xml::simplify (res)))

    (set wasTruncated (res.ListBucketResult.IsTruncated.0))
    (set res (select (isnotnull (i)) (map i (res.ListBucketResult.Contents)
        (?  (i.Size.0) null
            (& lastModified (datetime::parse (i.LastModified.0)) path (i.Key.0)))
    )))

    (when (isnull (res)) (set res (#)))
    (when (and (eqq (wasTruncated) "true") (ne 0 (res.length)) (lt (pageNumber) 100))
        (set lastKey ((array::last (res)).name))
        (array::append (res) (wasabi-list-folders (bucketName) (folderPath) (lastKey) (+ 1 (pageNumber))))
    )

    (res)
)


;; Returns the sum of the `size` field of all items in the list.
;; @param { [{size:string}] } itemList: The list of items to sum.
;; @returns {int}
(def-fn wasabi-sum-size itemList
    (reduce i z 0 (itemList) (+ (z) (int (i.size))))
)


;; Deletes a file.
;; @param {string} bucketName: Name of the bucket.
;; @param {string} filePath: Relative path of the file to delete.
;; @returns {void}
(def-fn wasabi-delete bucketName filePath
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set contentType "application/x-www-form-urlencoded")
    (set signature (wasabi-sign `DELETE\n\n{contentType}\n{requestDate}\n/{bucketName}/{filePath}`))

    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::delete "https://(bucketName).s3.wasabisys.com/(filePath)"))
        (throw (local.LAST_ERROR)))
)

;; Returns the size of a file or `null` if the file does not exist.
;; @param {string} bucketName: Name of the bucket.
;; @param {string} filePath: Relative path to the file.
;; @returns {int|null}
(def-fn wasabi-filesize bucketName filePath
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `HEAD\n\n\n{requestDate}\n/{bucketName}/{filePath}`))

    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (http::head "https://(bucketName).s3.wasabisys.com/(filePath)")
    (when (ne 200 (http::code)) (ret null))

    (http::headers."content-length")
)


;; Initiates a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @returns {string} The upload ID.
(def-fn wasabi-multipart-initiate bucketName filePath
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `POST\n\ntext/plain\n{requestDate}\n/{bucketName}/{filePath}?uploads`))

    (http::header "Content-Type: text/plain")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::post "https://(bucketName).s3.wasabisys.com/(filePath)?uploads" "{}"))
        (throw (local.LAST_ERROR)))

    (set res (utils::xml::parse (http::data)))
    (set res (utils::xml::simplify (res)))

    (res.InitiateMultipartUploadResult.UploadId.0)
)


;; Uploads a part of a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @param {string} uploadId: The upload ID.
;; @param { [{partNumber:int, etag:string}] } partsList: The list of parts, will be populated by this function.
;; @param {string} data: Data to upload.
;; @returns {void}
(def-fn wasabi-multipart-upload bucketName filePath uploadId partsList data
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `PUT\n\napplication/octet-stream\n{requestDate}\n/{bucketName}/{filePath}?partNumber={+ 1 {partsList.length}}&uploadId={uploadId}`))

    (http::header "Content-Type: application/octet-stream")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::put "https://(bucketName).s3.wasabisys.com/(filePath)?partNumber=(+ 1 (partsList.length))&uploadId=(uploadId)" (data)))
        (throw (local.LAST_ERROR)))

    (array::push (partsList) (&
        partNumber (+ 1 (partsList.length))
        etag ((http::headers).etag)
    ))
)


;; Completes a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @param {string} uploadId: The upload ID.
;; @param { [{partNumber:int, etag:string}] } partsList: The list of parts.
;; @returns {void}
(def-fn wasabi-multipart-complete bucketName filePath uploadId partsList
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `POST\n\napplication/xml\n{requestDate}\n/{bucketName}/{filePath}?uploadId={uploadId}`))

    (http::header "Content-Type: application/xml")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (set xmlData (str
        "<CompleteMultipartUpload>"
        (join (map i (partsList)
            "<Part><PartNumber>(i.partNumber)</PartNumber><ETag>(i.etag)</ETag></Part>"
        ))
        "</CompleteMultipartUpload>"
    ))

    (when (process-response (http::post "https://(bucketName).s3.wasabisys.com/(filePath)?uploadId=(uploadId)" (xmlData)))
        (throw (local.LAST_ERROR)))
)


;; Cancels a multipart upload.
;; @param {string} bucketName: Name of the bucket to create.
;; @param {string} filePath: Relative path of the file to create.
;; @param {string} uploadId: The upload ID.
;; @returns {void}
(def-fn wasabi-multipart-cancel bucketName filePath uploadId
    (set requestDate (datetime::format (datetime::now) "%a, %d %b %Y %H:%M:%S GMT"))
    (set signature (wasabi-sign `DELETE\n\ntext/plain\n{requestDate}\n/{bucketName}/{filePath}?uploadId={uploadId}`))

    (http::header "Content-Type: text/plain")
    (http::header "Date: (requestDate)")
    (http::header "Authorization: AWS (local.ACCESS_KEY_ID):(signature)")

    (when (process-response (http::delete "https://(bucketName).s3.wasabisys.com/(filePath)?uploadId=(uploadId)"))
        (throw (local.LAST_ERROR)))
)
