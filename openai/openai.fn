
(set key "")
(set orgid null)

;; Set the OpenAI API key and organization ID (optional).
;; @param {string} key
;; @param {string} [orgid]
(def-fn openai:config key orgid=null
    (set local.key (key))
    (set local.orgid (orgid))
)

;; Returns the transcript of an audio file. Uses the `whisper-1` model by default.
;; @param { string | {path:str} | {name:str, data:str} } audio
;; @param {string} [model="whisper-1"]
;; @param {number} [temperature=0.0]
;; @returns {string}
(def-fn openai:transcript audio model="whisper-1" temperature=0.0

    (request:auth "bearer" (local.key))
    (when (local.orgid)
        (request:header "OpenAI-Organization: (local.orgid)"))

    (set result (request:fetch "POST" "https://api.openai.com/v1/audio/transcriptions" {
        file (audio)
        model (model)
        temperature (number (temperature))
    }))

    (when (ne? 200 (request:status))
        (trace "[ERROR] (datetime:now): openai:transcript (request:status): (result)")
        (throw "Unable to get transcript: (request:status) (result.error.message)")
    )

    (result.text)
)

;; Returns the translation of an audio file into english. Uses the `whisper-1` model by default.
;; @param { string | {path:str} | {name:str, data:str} } audio
;; @param {string} [model="whisper-1"]
;; @param {number} [temperature=0.0]
;; @returns {string}
(def-fn openai:translation audio model="whisper-1" temperature=0.0

    (request:auth "bearer" (local.key))
    (when (local.orgid)
        (request:header "OpenAI-Organization: (local.orgid)"))

    (set result (request:fetch "POST" "https://api.openai.com/v1/audio/translations" {
        file (audio)
        model (model)
        temperature (number (temperature))
    }))

    (when (ne? 200 (request:status))
        (trace "[ERROR] (datetime:now): openai:translation (request:status): (result)")
        (throw "Unable to get translation: (request:status) (result.error.message)")
    )

    (result.text)
)

;; Converts text to speech.
;; @param {string} input - The text to convert to speech.
;; @param {string} [voice="nova"] - Voices: `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`.
;; @param {string} [model="tts-1"] - TTS models: `tts-1` and `tts-1-hd`.
;; @param {string} [response_format="opus"] - Response formats: `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
;; @returns {string}
(def-fn openai:speech input voice="nova" model="tts-1" response_format="opus"

    (request:auth "bearer" (local.key))
    (when (local.orgid)
        (request:header "OpenAI-Organization: (local.orgid)"))

    (set result (request:post "https://api.openai.com/v1/audio/speech" (json:str {
        model (model)
        input (input)
        voice (voice)
        response_format (response_format)
        speed 1.0
    })))

    (when (ne? 200 (request:status))
        (set result (json:parse (result)))
        (trace "[ERROR] (datetime:now): openai:speech (request:status): (result)")
        (throw "Unable to get speech: (request:status) (result.error.message)")
    )

    (result)
)

;; Creates a new chat request object.
;; @param {string} [model="gpt-4o"] Models: `gpt-4`, `gpt-4-turbo-preview`, and `gpt-4o`.
;; @param {string} [response_type=null] Response types: `null`, `json_object`.
;; @param {object} [functions=null] A list of functions to call.
;; @param {number} [temperature=0.25] The randomness of the response.
;; @returns {object}
(def-fn openai:chat model="gpt-4o" response_type=null functions=null temperature="0.25"

    (set chat {
        model (model)
        temperature (number (temperature))
        top_p 0.5
        messages []
    })

    (when (response_type)
        (set chat.response_format (& type (response_type))))

    (when (functions)
        (set chat.functions (functions))
        (set chat.function_call "auto")
    )

    (chat)
)

;; Adds a user message to the chat request object.
;; @param {object} chat - The chat request object.
;; @param {string|array[string]} text - The message to add.
(def-fn openai:message chat text
    (if (eq? "array" (typeof (text)))
        (for content (text)
            (array:push (chat.messages) (& role "user" content (content))))
    else
        (array:push (chat.messages) (& role "user" content (text)))
    )
)

;; Adds a system message to the chat request object.
;; @param {object} chat - The chat request object.
;; @param {string|array[string]} text - The message to add.
(def-fn openai:rule chat text
    (if (eq? "array" (typeof (text)))
        (for content (text)
            (array:push (chat.messages) (& role "system" content (content))))
    else
        (array:push (chat.messages) (& role "system" content (text)))
    )
)

;; Adds a function response message to the chat request object.
;; @param {object} chat - The chat request object.
;; @param {string} functionName - The name of the function.
;; @param {string} content - The content of the function response.
(def-fn openai:functionResponse chat functionName content
    (array:push (chat.messages (& role "function" content (content) name (functionName))))
)

;; Completes the chat request object and returns the response text content.
;; @param {object} chat - The chat request object.
;; @returns {string}
(def-fn openai:complete chat

    (request:auth "bearer" (local.key))
    (when (local.orgid)
        (request:header "OpenAI-Organization: (local.orgid)"))

    (set result (request:fetch "POST" "https://api.openai.com/v1/chat/completions" (json:str (chat))))
    (when (ne? 200 (request:status))
        (trace "[ERROR] (datetime:now): openai:complete (request:status): (result)")
        (throw "Unable to complete chat: (request:status) (result.error.message)")
    )

    (for choice (result.choices)

        ;; Skip messages from the assistant.
        (when (ne? "assistant" (choice.message.role))
            (continue))

        ;; Process function calls.
        (when (eq? "function_call" (choice.finish_reason))

            ;; Remove function call from functions list for next completion.
            (array:remove (chat.functions) (findIndex i (chat.functions) (eq (choice.message.function_call.name) (i.name))))

            ;; Remove `functions` and `function_call` from request if no more functions are left.
            (when-not (len (chat.functions))
            	(map:remove (chat) "functions")
            	(map:remove (chat) "function_call")
            )

            ;; Execute function and store the response.
            (set functionResponse
                ((local.functions.(choice.message.function_call.name)) (json:parse (choice.message.function_call.arguments))))

            ;; Add the current message along with the function response to the chat.
            (array:push (chat.messages) (choice.message))
            (openai:functionResponse (chat) (i.message.function_call.name) (json:str (functionResponse)))

            (ret (openai:complete (chat)))
        )

        ;; Check if finish reason was not natural stop.
        (when (ne? "stop" (choice.finish_reason))
            (trace "[ERROR] (datetime:now): openai:complete: finish_reason=(choice.finish_reason), usage: (result.usage)")
            (throw "Finish reason: (choice.finish_reason)")
        )

        ;; Add message to the chat and return content.
        (array:push (chat.messages) (choice.message))
        (ret (choice.message.content))
    )

    (trace "[ERROR] (datetime:now): openai:complete: unable to complete chat, result: (result)")
    (throw "Unable to complete chat")
)















(set functions (&
))

(set fnDescriptors (&
))



(def-fn openai:string description=""
    (&
        type "string"
        description (description)
    )
)

(def-fn openai:integer description=""
    (&
        type "integer"
        description (description)
    )
)

(def-fn openai:boolean description=""
    (&
        type "boolean"
        description (description)
    )
)

(def-fn openai:number description=""
    (&
        type "number"
        description (description)
    )
)

(def-fn openai:enum options description=""
    (&
        type "string"
        description (description)
        enum (options)
    )
)

(def-fn openai:getFunctions
    (map:values (local.fnDescriptors))
)

(def-fn openai:function name description parameterList requiredList functionRef
    (set local.functions.(name) (functionRef))

    (set fdef (&
        name (name)
        description (description)
        parameters (&
            type "object"
            properties (parameterList)
            required (requiredList)
        )
    ))

    (set local.fnDescriptors.(name) (fdef))
    (fdef)
)

(def-fn openai:ask question json_object=false model="gpt-4o" temperature=0.25
    (set chat (openai:chat (model) (? (json_object) "json_object" null) null (temperature)))
    (openai:message (chat) (question))
    (openai:complete (chat))
)