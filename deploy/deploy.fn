;;
;;  Deployment Utility
;;

;; Local variables.
(set vars {
    storage {}
    args []
    cwd []
})

(set state [ "DEF" ])
(set lineno 0)
(set value "")
(set buffer "")

;; Returns an ANSI escape sequence for the specified color code.
(def-fn clr value
    "\x1B[(value)m")

;; Exports a value into the context variables.
(def-fn set-var name value
    (set local.vars.(name) (value)))

;; Expands the `value` variable of the local scope, returns `def-value` if `value` is empty.
(def-fn val_ def-value
    (? (eq? "" (local.value))
        (def-value)
        (expand (local.value) (local.vars))))

;; Interprets a command.
(def-fn interpret cmd

    (switch (upper (cmd))

        case ECHO
            (echo (val_ ""))

        case PUTENV
            (env:set (val_ ""))

        case LOAD:STRICT
            (set value (val_ ".config"))
            (when-not (path:exists (value))
                (throw "Input file (value) not found."))

        case LOAD
            (set value (val_ ".config"))
            (when (path:exists (value))
                (map:assign (local.vars.storage) (json:parse (file:read (value)))))

        case STORE
            (set value (val_ ".config"))
            (file:write (value) (json:dump (local.vars.storage)))

        case EXEC
            (set local.vars.errorlevel (sys:exec (val_ "")))

        case RUN
            (set errorlevel (sys:exec (val_ "")))
            (ne? 0 (errorlevel)
                (throw "Command failed with exit code: (errorlevel)"))

        case SHELL
            (set local.vars.shell (sys:shell (val_ "")))

        case CHDIR
            (path:chdir (val_ null))

        case PUSHD
            (array:push (local.vars.cwd) (path:cwd))

        case POPD
            (set value (array:pop (local.vars.cwd)))
            (path:chdir (value))

        case MKDIR
            (dir:create (val_ null))

        case RMDIR
            (dir:remove-recursive (val_ null))

        case CLEAN
            (for i (dir:files (val_ null))
                (file:remove (i.path)))

        case DEL
            (file:remove (val_ ""))

        case DIRCOPY
            (dir:copy (local.vars.r0) (val_ null))

        case DIRCOPY:FILES
            (dir:copy (local.vars.r0) (val_ null) false)

        case COPY
            (file:copy (local.vars.r0) (val_ null))

        case REPLACE
            (set value (val_ null))
            (file:write (value) (str:replace (local.vars.r0) (local.vars.r1) (file:read (value))))

        case READ
            (set value (val_ null))
            (set local.vars.r0 (file:read (value)))

        case WRITE
            (set value (val_ null))
            (file:write (value) (local.vars.r0))

        case APPEND
            (set value (val_ null))
            (file:append (value) (local.vars.r0))

        case STOP
            (throw "@STOP")

        case IF
            (if (val_ false)
                (array:push (local.state) "EXEC-IF")
            else
                (array:push (local.state) "FIND-ELSE"))

        case ELIF
            (throw "Unexpected ELIF, current state: (array:last (local.state))")

        case ELSE
            (throw "Unexpected ELSE, current state: (array:last (local.state))")

        case END-IF
            (throw "Unexpected END-IF, current state: (array:last (local.state))")

        case BEGIN
            (set local.buffer "")
            (array:push (local.state) "BLOCK")

        case END
            (throw "Unexpected END, current state: (array:last (local.state))")

        case FAIL
            (echo (clr 91) "Error: " (clr 0) (val_ ""))
            (throw "@STOP")

        case EVAL
            (val_ "")

        default
            (set local.vars.(cmd) (val_ ""))
    )
)

;; Executes a deployment file.
(def-fn execute srcFile args=null

    (when (args)
        (set local.vars.args (args)))

    (set src (path:resolve (srcFile)))
    (when-not (path:exists (src))
        (throw "Source file not found: (srcFile)"))

    (set srcFile (path:basename (src)))
    (set src (path:dirname (src)))
    (path:chdir (src))

    (try
        (for line (map line (split "\n" (file:read (srcFile))) (trim (line)))

            (inc local.lineno)

            (when (or (eq? "" (line)) (starts-with? "#" (line)))
                (continue))

            (set x (re:match `/^(.+?)(\s.+)?$/` (line)))

            (set cmd (x.1))
            (set local.value (trim (x.2)))

            (switch (array:last (local.state))

                case "DEF"
                    (interpret (cmd))

                case "EXEC-IF"
                    (switch (upper (cmd))
                        case "ELSE"
                            (array:pop (local.state))
                            (array:push (local.state) "FIND-END-IF")
                        case "END-IF"
                            (array:pop (local.state))
                        default
                            (interpret (cmd))
                    )

                case "FIND-ELSE"
                    (switch (upper (cmd))
                        case "IF"
                            (array:push (local.state) "FIND-END-IF")
                        case "ELIF"
                            (if (val_ false)
                                (array:pop (local.state))
                                (array:push (local.state) "EXEC-IF")
                            )
                        case "ELSE"
                            (array:pop (local.state))
                            (array:push (local.state) "EXEC-IF")
                        case "END-IF"
                            (array:pop (local.state))
                    )

                case "FIND-END-IF"
                    (switch (upper (cmd))
                        case "IF"
                            (array:push (local.state) "FIND-END-IF")
                        case "END-IF"
                            (array:pop (local.state))
                    )

                case "BLOCK"
                    (switch (upper (cmd))
                        case "END"
                            (array:pop (local.state))
                            (eval (local.buffer))
                        default
                            (append local.buffer (line))
                            (append local.buffer "\n")
                    )
            )
        )

    catch
        (switch (err)
            case "@STOP"
            default (throw "line (local.lineno): (err)")
        )
    )
)
